@model FrontendSchemeRegistration.UI.ViewModels.RegistrationApplication.ComplianceSchemeFeeCalculationBreakdownViewModel

@{
    ViewData["Title"] = Localizer["registration_fee_calculations"];
}

<main class="govuk-main-wrapper" id="main-content" role="main">
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <h1 class="govuk-heading-l govuk-!-margin-bottom-4">
                @Localizer[!Model.IsRegistrationFeePaid ? "registration_fee_due" : "registration_fee"]
            </h1>
            @if (!Model.IsRegistrationFeePaid)
            {
                <p class="govuk-body">
                    @Localizer["registration_fee_due_x_to_process_application", ConvertToThousandSeparatedDecimal(Model.TotalAmountOutstanding)]
                </p>

                <p class="govuk-body govuk-!-margin-bottom-4">@Localizer["registration_fees_calculated_from_your_information"]</p>
                <p class="govuk-body govuk-!-margin-bottom-4">
                    <a class="govuk-link" rel="noreferrer noopener" target="_blank"
                       href="@GuidanceLinks.Value.EPR_IllustrativeFeesAndCharges">@Localizer["more_about_EPR_fees_and_charges"]</a>.
                </p>
            }

            <partial name="_ComplianceSchemeFeeCalculationBreakdown" model="@Model" />

            <br /><br />

            @if (!Model.RegistrationApplicationSubmitted)
            {
                <a asp-action="SelectPaymentOptions" asp-route-registrationyear="@Model.RegistrationYear" role="button" draggable="false" class="govuk-button" data-module="govuk-button">
                    @SharedLocalizer["continue"]
                </a>
            }
            else
            {
                <a asp-action="RegistrationTaskList" asp-route-registrationyear="@Model.RegistrationYear" class="govuk-link govuk-link--no-visited-state">
                    @Localizer["return_to_registration_steps"]
                </a>
            }
        </div>
    </div>
</main>

@functions
{
    private static string ConvertToThousandSeparatedDecimal(int number) => (number / 100).ToString("#,##0.00");
}
